;; (define-syntax-case figures ()
;;   ((_ figure1 figure2 ...)
;;    (let ((values '()))
;;      (for-each (lambda (figure)
;; 		 (cond
;; 		  ((eq? (car figure) 'square)
;; 		   (let ((x1 (list-ref figure 1))
;; 			 (y1 (list-ref figure 2))
;; 			 (x2 (list-ref figure 3))
;; 			 (y2 (list-ref figure 4)))
;; 		     (set! values (append values (list x1 y1 0 0 x1 y2 0 1 x2 y1 1 0 x2 y2 1 1)))))
;; 		  (else (raise (format #f "Figure ~a not defined" (car figure))))))
;; 	       #'(figure1 figure2 ...))
;;      #`(float[] #,@values))))

(define-syntax-case square ()
  ((_ x1 y1 x2 y2)
   #'(list x1 y1 0 0 x1 y2 0 1 x2 y1 1 0 x2 y2 1 1)))

(define-syntax-case ->float[] ()
  ((_ ls)
   (let ((values (eval #'(list ls))) (res '()))
     ;; (for-each (lambda (list)
     ;; 		 (set! res (append res list)))
     ;; 	       values)
     #`(float[] #,@values))))

(define-syntax-case figures ()
  ((_ figure1 figure2 ...)
   (let ((values (eval #'(append (syntax->datum figure1) (syntax->datum figure2) ...))))
     #`(float[] #,@values))))

;; (define foo (let ((squares '()))
;; 	      (set! squares (append squares (list (square 0 1 1 0))))
;; 	      `(figures ,@squares)))
